{"version":3,"file":"components-final-form-SubmitButton-SubmitButton-stories.618a91ef.iframe.bundle.js","mappings":";AAqCA;AACA;;AAqCA;;;;AC9DA;AAGA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;AAeA;;;;AAMA;;;;;;;ACzBA;;;;AAMA;;AAEA;AAGA;;;;;AAKA;AAGA;AACA;AAIA;AACA;AAEA;AC/CA;AACA;;;;ACFA;;;;;;AAMA;AACA;AAEA;;ACuDA;AACA;;;AAGA;;AAGA;AACA;;AAEA;AA5DA;AAAA;AAwBA;AAxBA;AAAA;AA+BA;AAEA;AACA;AAIA;AAEA;AACA;AA3BA;AAmDA;ACtEA;;AAEA;AAOA;ACRA;AAGA","sources":["webpack://@amsterdam/amsterdam-react-final-form/./src/components/layout/responsiveProps.ts","webpack://@amsterdam/amsterdam-react-final-form/./src/utils/InfoTooltip.tsx","webpack://@amsterdam/amsterdam-react-final-form/./src/components/unbound/Label.tsx","webpack://@amsterdam/amsterdam-react-final-form/./src/components/unbound/Hint.tsx","webpack://@amsterdam/amsterdam-react-final-form/./src/components/unbound/FieldError.tsx","webpack://@amsterdam/amsterdam-react-final-form/./src/components/layout/FormGridCell.tsx","webpack://@amsterdam/amsterdam-react-final-form/./src/components/unbound/UnboundButton.tsx","webpack://@amsterdam/amsterdam-react-final-form/./src/components/unbound/UnboundTextField.tsx"],"sourcesContent":["import { breakpoint } from \"@amsterdam/asc-ui\"\nimport { css } from \"styled-components\"\n\nexport type BreakPoint =\n  | \"mobileS\"\n  | \"mobileM\"\n  | \"mobileL\"\n  | \"tabletS\"\n  | \"tabletM\"\n  | \"laptop\"\n  | \"laptopM\"\n  | \"laptopL\"\n  | \"desktop\"\n  | \"desktopL\"\n\nexport type OnlyResponsive<T> = { [key in BreakPoint]?: T }\nexport type Responsive<T> = T | OnlyResponsive<T>\n\ntype UnitFunction = (unit: any) => any\n\nconst breakPoints: BreakPoint[] = [\n  \"mobileS\",\n  \"mobileM\",\n  \"mobileL\",\n  \"tabletS\",\n  \"tabletM\",\n  \"laptop\",\n  \"laptopM\",\n  \"laptopL\",\n  \"desktop\",\n  \"desktopL\"\n]\n\n/**\n * Wraps given cssRules in the corresponding media-query:\n */\nexport const mq = (bk: BreakPoint, cssRules: any) => css`\n  @media screen and ${ breakpoint(\"min-width\", bk) } {\n    ${ cssRules }\n  }\n`\n\nconst isResponsiveObject = (obj:any): obj is Responsive<any> => {\n  if (typeof obj !== \"object\") {\n    return false\n  }\n\n  const keys = Object.keys(obj)\n  for(const breakPoint of breakPoints) {\n    if (keys.includes(breakPoint)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Wraps 'responsive-props' in media-queries if necessary.\n */\nexport const responsiveProps = <T extends Record<string, any>>(props: T, map: { [key in keyof T]: UnitFunction }) => {\n  const nonResponsiveRules = Object\n    .entries<UnitFunction>(map)\n    .filter(([key]) => !isResponsiveObject(props[key]))\n    .map(([key, fun]) => fun(props[key]))\n\n  const mediaQueries = breakPoints\n    .map(bp => {\n      // See if we can make css-rules for this breakpoint:\n      const responsiveCssRules = Object\n        .entries<UnitFunction>(map)\n        .filter(([key]) => props?.[key]?.[bp] !== undefined)\n        .map(([key, fun]) => fun(props[key][bp]))\n\n      return (responsiveCssRules.length > 0)\n        ? mq(bp, responsiveCssRules) // Wrap css-rules in a mediaQuery\n        : undefined // Undefined -> filter out later\n    })\n    .filter(_ => _ !== undefined)\n\n  return [\n    mediaQueries, ...nonResponsiveRules\n  ]\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Icon, themeSpacing } from \"@amsterdam/asc-ui\"\nimport { Info } from \"@amsterdam/asc-assets\"\n\ntype Props = {\n  text: string\n}\n\nconst Wrap = styled.div`\n  position: relative;\n  display: inline-block;\n  cursor: help;\n  margin-left: ${ themeSpacing(2) } !important;\n`\n\nconst StyledTooltipText = styled.span`\n  visibility: hidden;\n  opacity: 0;\n  position: absolute;\n  z-index: 100;\n  white-space: normal;\n  width: 250px;\n  background-color: rgba(0, 0, 0, 0.85);\n  color: #fff;\n  text-align: center;\n  font-size: 14px;\n  border-radius: 6px;\n  padding: ${ themeSpacing(2) };\n  bottom: 100%;\n  left: 50%;\n  margin-left: -125px !important;\n  transition: opacity 0.3s;\n  &::after {\n    content: \"\";\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    margin-left: -5px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: black transparent transparent transparent;\n  }\n  ${ Wrap }:hover & {\n    visibility: visible;\n    opacity: 1;\n  }\n`\n\nconst InfoTooltip: React.FC<Props> = ({ text }) => (\n  <Wrap>\n    <Icon size={18}>\n      <Info />\n    </Icon>\n    <StyledTooltipText>{text}</StyledTooltipText>\n  </Wrap>\n)\n\nexport default InfoTooltip\n","import React from \"react\"\nimport { Label as AscLabel, themeSpacing } from \"@amsterdam/asc-ui\"\nimport styled, { css } from \"styled-components\"\nimport InfoTooltip from \"../../utils/InfoTooltip\"\n\ntype Props = {\n  label?: string\n  extraLabel?: string | JSX.Element\n  extraLabelAlign?: \"left\" | \"right\"\n  htmlFor?: string\n  tooltip?: string\n}\n\ntype WrapProps = {\n  extraLabelAlign: string\n}\n\nconst style = css`\n  line-height: 18px;\n  font-size: 18px;\n  font-weight: 600;\n  width: 100%;\n\n  span {\n    margin: ${ themeSpacing(1) } 0;\n    align-items: center;\n    display: flex;\n  }\n`\n\nconst FlexWrap = styled.div<WrapProps>`\n  display: flex;\n  justify-content: ${ ( { extraLabelAlign }) => extraLabelAlign === \"right\" ? \"space-between\" : \"flex-start\" }\n`\n\nconst Left = styled.div`\n  flex-grow: 0;\n  flex-shrink: 0;\n  white-space: nowrap;\n  align-self: center;\n  margin-right: ${ themeSpacing(2) };\n`\n\nconst Right = styled.div`\n  margin: ${ themeSpacing(1) } 0;\n`\n\n\nconst StyledLabel = styled(AscLabel)`\n  ${ style }\n`\nStyledLabel.displayName = \"StyledLabel\"\n\nexport const Label:React.FC<Props> = ({ label, extraLabel, extraLabelAlign = \"left\", htmlFor, children, tooltip  }) => {\n  if (label !== undefined) {\n    return (\n      extraLabel\n        ? (\n          <FlexWrap extraLabelAlign={ extraLabelAlign }>\n            <Left>\n              <StyledLabel\n                label={\n                  <>\n                    {label}\n                    {tooltip && <InfoTooltip text={tooltip} />}\n                  </>\n                }\n                htmlFor={htmlFor}\n                position='top'\n                align='flex-start'\n              >\n                { children }\n              </StyledLabel>\n            </Left>\n            { extraLabelAlign === \"right\" ? (\n              <Right>\n                { extraLabel }\n              </Right>\n            ) : (\n              <Left>\n                { extraLabel }\n              </Left>\n            )}\n          </FlexWrap>\n        )\n        : (\n        <StyledLabel\n          label={\n            <>\n              {label}\n              {tooltip && <InfoTooltip text={tooltip} />}\n            </>\n          }\n          htmlFor={htmlFor}\n          position='top'\n          align='flex-start'\n        >\n          { children }\n        </StyledLabel>\n      )\n    )\n  }\n  return <>{ children }</>\n}","import styled from \"styled-components\"\nimport { themeColor, themeSpacing } from \"@amsterdam/asc-ui\"\n\nexport const Hint = styled.p`\n  color: ${ themeColor(\"tint\", \"level4\") };\n  font-size: ${ themeSpacing(4) };\n  margin: 0;  \n  line-height: 22px;\n  font-weight: normal;\n`\n","import styled from \"styled-components\"\nimport { themeColor, themeSpacing } from \"@amsterdam/asc-ui\"\n\nexport const FieldError = styled.div`\n  line-height: 25px;\n  font-size: 18px;\n  font-weight: 600;\n  width: 100%;\n  \n  margin-top: ${ themeSpacing(2) };\n  color: ${ themeColor(\"support\", \"invalid\") }\n`\nFieldError.displayName = \"FieldError\"\n","import styled, { css, SimpleInterpolation } from \"styled-components\"\nimport { Responsive, responsiveProps }  from \"./responsiveProps\"\nimport { themeSpacing } from \"@amsterdam/asc-ui\"\n\nexport type Dimensions = {\n  row?: number,\n  rowSpan?: number\n  column?: number\n  columnSpan?: number\n}\n\nexport type FormGridCellProps = {\n  position?: Responsive<Dimensions>\n  align?: Responsive<\"left\" | \"right\" | \"center\">\n  rowOffset?: number\n}\n\nconst NUM_ROWS_PER_FIELD = 2\n\n// NOTE:\n//\n// We have to implement our own version of -ms-grid.\n// Styled-components does not automatically prefix it, as the specs do not completely overlap.\n// https://github.com/thysultan/stylis.js/issues/51\n//\n// We can achieve our goals using both specs though.\n\nconst generateDimensionsCss = (position:Dimensions, rowOffset:number) => {\n  const parts:SimpleInterpolation[] = []\n\n  if (position === undefined) {\n    return parts\n  }\n\n  if (position.row !== undefined) {\n    parts.push(css`\n      grid-row-start: ${ (position.row * NUM_ROWS_PER_FIELD) + 1 + rowOffset };\n      -ms-grid-row: ${ (position.row * NUM_ROWS_PER_FIELD) + 1 + rowOffset };\n    `)\n  }\n\n  if (position.rowSpan && rowOffset) {\n    parts.push(css`\n      grid-row-end: span ${ (position.rowSpan * NUM_ROWS_PER_FIELD) - 1 };\n      -ms-grid-row-span: ${ (position.rowSpan * NUM_ROWS_PER_FIELD) - 1 };\n    `)\n  }\n\n  if (position.column !== undefined)  {\n    parts.push(css`\n      grid-column-start: ${ position.column + 1 };\n      -ms-grid-column: ${ position.column + 1 };\n    `)\n  }\n\n  if (position.columnSpan !== undefined) {\n    parts.push(css`\n      grid-column-end: span ${ position.columnSpan };\n      -ms-grid-column-span: ${ position.columnSpan };\n    `)\n  }\n\n  return parts\n}\n\nconst FormGridCell = styled.div<FormGridCellProps>`\n\n  margin: ${ themeSpacing(1) } ${ themeSpacing(2) };\n  ${ ({ rowOffset }) => rowOffset !== undefined && css`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: ${ themeSpacing(5) };`\n  }\n\n  align-self: ${ ({ rowOffset }) => rowOffset === undefined ? \"end\" : \"initial\" };\n  -ms-grid-row-align: ${ ({ rowOffset }) => rowOffset === undefined ? \"end\" : \"initial\" };\n\n  ${ (props: FormGridCellProps) => responsiveProps(props, {\n    \"align\": unit => css`text-align: ${ unit };`,\n    \"position\": unit => generateDimensionsCss(unit, props.rowOffset ?? 0)\n  } ) }\n`\nFormGridCell.displayName = \"FormGridCell\"\n\nexport default FormGridCell\n","import React from \"react\"\nimport { Button, themeSpacing } from \"@amsterdam/asc-ui\"\nimport styled, { css } from \"styled-components\"\nimport ComposedField, { ComposedFieldProps } from \"./ComposedField\"\nimport { Responsive, responsiveProps } from \"../layout/responsiveProps\"\n\nexport type Props = React.ComponentProps<typeof Button> & ComposedFieldProps & {\n  alignedHorizontally?: Responsive<boolean>\n}\n\ntype StyledButtonProps = Pick<Props, \"alignedHorizontally\">\nconst StyledButton = styled(Button)<StyledButtonProps>`\n  margin-top: ${ themeSpacing(1) };\n  \n  ${ ((props:StyledButtonProps) => responsiveProps(props, {\n    // Its aesthetically more pleasing if horizontally aligned buttons have a negative top-margin.\n    // You have to set the property yourself though\n    alignedHorizontally: unit => css`margin-top: ${ themeSpacing( unit ? -1 : 1) };`\n  })) }\n`\n\nconst UnboundButton:React.FC<Props> = ({ position, align, ...restProps }) => (<ComposedField position={position} align={align}>\n  <div><StyledButton {...restProps} /></div>\n</ComposedField>)\n\nexport default UnboundButton\n","import React from \"react\"\nimport { Input } from \"@amsterdam/asc-ui\"\nimport styled from \"styled-components\"\n\nimport ComposedField, { ComposedFieldProps } from \"./ComposedField\"\n\nexport type Props = ComposedFieldProps & React.InputHTMLAttributes<HTMLInputElement>\n\n/**\n * Renders a INPUT field that is not bound to final-form.\n */\n\nconst StyledInput = styled(Input)`\n  min-height: ${ props => props.type === \"time\" ? \"40px\" : \"auto\" };\n`\n\nconst UnboundTextField:React.FC<Props> = ({\n  label, extraLabel, extraLabelAlign, hint, error, position, align, tooltip, ...otherProps\n}) =>\n  <ComposedField\n    id={otherProps.id ?? otherProps.name}\n    label={label}\n    extraLabel={extraLabel}\n    extraLabelAlign={extraLabelAlign}\n    hint={hint}\n    error={error}\n    position={position}\n    align={align}\n    tooltip={tooltip}\n  >\n    <StyledInput\n      error={!!error}\n      id={otherProps.id ?? otherProps.name}\n      data-testid={otherProps.id ?? otherProps.name}\n      {...otherProps}\n    />\n  </ComposedField>\n\nexport default UnboundTextField\n"],"names":[],"sourceRoot":""}