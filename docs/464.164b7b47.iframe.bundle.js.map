{"version":3,"file":"464.164b7b47.iframe.bundle.js","mappings":";;;;;;;;;;AAeA;;;AAGA;AACA;;;;;;;;;;;;;;AAcA;;;AAGA;;;;;AAMA;;;;AASA;;;;;;AAMA;;AAEA;;;;;;AAMA;;;;AAKA;AAIA;;AAEA;;;AAKA;;AC5EA;AACA;AAEA;AACA;;;;ACFA;AAEA;;;AAOA;;AAIA;;;;AAIA;AAEA;;;AAGA;ACzBA;;ACEA;;AAMA;;;;;;;AASA;;;;AAIA;AAKA;;;;;AAKA;;;AAKA;;AAEA;AACA;AACA;AAiDA;;;AA5CA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;AAkBA;;;;AAIA;AAGA;;;;;;;AAOA;;;AAGA;AAEA;;AC1FA;ACGA;ACHA","sources":["webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-ui/es/components/Radio/RadioStyle.js","webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-ui/es/components/Radio/RadioGroupStyle.js","webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-ui/es/components/FormLabelStyle/FormLabelStyle.js","webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-assets/es/icons/ChevronDown.js","webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-ui/es/components/Select/SelectStyle.js","webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-ui/es/components/Select/Select.js","webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-ui/es/components/TextArea/TextAreaStyle.js","webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-ui/es/components/TextArea/TextArea.js"],"sourcesContent":["import styled, { css } from 'styled-components';\r\nimport { themeColor, themeSpacing } from '../../utils';\r\nconst RadioStyle = styled.input.attrs({\r\n    type: 'radio',\r\n}) `\n  cursor: inherit;\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  left: 4px;\n  top: 4px;\n  outline-width: 10px;\n`;\r\nconst RadioCircleStyle = styled.span `\n  width: 24px;\n  height: 24px;\n  color: ${themeColor('tint', 'level5')};\n  background-color: ${themeColor('tint', 'level1')};\n  border: 1px solid;\n  border-radius: 50%;\n  z-index: 1;\n\n  &::after {\n    content: '';\n    position: absolute;\n    height: 16px;\n    width: 16px;\n    border-radius: 50%;\n    transform: translate(-50%, -50%);\n    left: 50%;\n    top: 50%;\n    background-color: ${themeColor('tint', 'level7')};\n    opacity: 0;\n    z-index: 1;\n    ${({ checked }) => checked &&\r\n    css `\n        opacity: 1;\n      `}\n  }\n\n  ${({ error, checked, disabled, focus }) => error &&\r\n    !checked &&\r\n    !disabled &&\r\n    !focus &&\r\n    css `\n      border-width: 2px;\n      color: red;\n    `}\n`;\r\nconst RadioWrapperStyle = styled.span `\n  position: relative;\n  display: inline-flex;\n  user-select: none;\n  vertical-align: middle;\n  flex-shrink: 0; /* IE11 fix */\n  padding: ${themeSpacing(1)};\n  margin-bottom: 1px;\n  margin-right: ${themeSpacing(2)};\n\n  input:focus ~ span {\n    display: inline-block;\n  }\n\n  ${({ disabled }) => disabled &&\r\n    css `\n      pointer-events: none;\n    `}\n\n  ${({ checked, disabled, focus }) => !checked &&\r\n    !disabled && // IE11 fix. If an element is disabled, you can still hover on it on IE11.\r\n    !focus && // don't override the outline if element is also focussed\r\n    css `\n      &:hover ${RadioCircleStyle} {\n        border: 2px solid;\n        color: ${themeColor('tint', 'level7')};\n      }\n    `}\n`;\r\nexport { RadioWrapperStyle, RadioCircleStyle };\r\nexport default RadioStyle;\r\n//# sourceMappingURL=RadioStyle.js.map","import styled, { css } from 'styled-components';\r\nimport LabelStyle from '../Label/LabelStyle';\r\nimport { themeSpacing } from '../../utils';\r\nexport default styled.div `\n  display: flex;\n  flex-direction: ${({ horizontal }) => (horizontal ? 'row' : 'column')};\n  ${({ horizontal }) => horizontal &&\r\n    css `\n      ${LabelStyle} {\n        margin-right: ${themeSpacing(4)};\n      }\n    `}\n`;\r\n//# sourceMappingURL=RadioGroupStyle.js.map","import styled, { css } from 'styled-components';\r\nimport { getTypographyFromTheme, srOnlyStyle, themeColor, themeSpacing, } from '../../utils';\r\nconst FormLabelStyle = styled.label.attrs(({ htmlFor }) => {\r\n    return {\r\n        htmlFor,\r\n    };\r\n}) `\n  ${({ label }) => label &&\r\n    css `\n      ${({ theme }) => getTypographyFromTheme()({\r\n        as: 'p',\r\n        gutterBottom: 0,\r\n        theme,\r\n    })};\n    `}\n\n  ${({ srOnly, label, error }) => (label || error) && // Style if `label` or `errer` prop is set\r\n    !srOnly && // Don't style for screen reader\r\n    css `\n      display: block;\n      padding-bottom: ${themeSpacing(2)};\n      font-weight: 700;\n    `}\n\n  ${({ error }) => error &&\r\n    css `\n      color: ${themeColor('error', 'main')};\n    `}\n\n  ${({ srOnly }) => srOnly && srOnlyStyle}\n`;\r\nexport default FormLabelStyle;\r\n//# sourceMappingURL=FormLabelStyle.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\r\nfunction SvgChevronDown(props) {\r\n    return (_jsx(\"svg\", Object.assign({ viewBox: \"0 0 32 32\", xmlns: \"http://www.w3.org/2000/svg\", role: \"img\", focusable: false }, props, { children: _jsx(\"path\", { d: \"m16 25.757-16-16 2.91-2.9L16 19.937l13.09-13.08 2.91 2.9z\", fillRule: \"evenodd\" }) })));\r\n}\r\nexport default SvgChevronDown;\r\n//# sourceMappingURL=ChevronDown.js.map","import { ChevronDown } from '@amsterdam/asc-assets';\r\nimport styled, { css } from 'styled-components';\r\nimport { themeColor, themeSpacing } from '../../utils';\r\nimport { INPUT_SIZE } from '../shared/constants';\r\nexport const SelectWrapper = styled.div `\n  position: relative;\n  height: ${INPUT_SIZE}px;\n  width: 100%;\n`;\r\n/**\r\n * Contains all of the absolute content which is placed above the select element.\r\n */\r\nexport const AbsoluteContentWrapper = styled.div.attrs({\r\n    'aria-hidden': 'true',\r\n}) `\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  margin: 3px; /* Allows the default browser(s) default focus style to be displayed. */\n  padding: 0 calc(${themeSpacing(3)} - 1px); /* Match the spacing of the select element. */\n  display: flex;\n  align-items: center;\n  pointer-events: none;\n  background-color: ${themeColor('tint', 'level1')};\n`;\r\n/**\r\n * Since Chrome does not support `text-overflow: hidden` we need show the value in a separate element.\r\n */\r\nexport const SelectedValue = styled.div `\n  margin-right: auto;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  ${({ disabled }) => disabled &&\r\n    css `\n      opacity: 0.5;\n    `}\n`;\r\nexport const SelectIcon = styled(ChevronDown) `\n  display: block;\n  width: ${themeSpacing(3)};\n  height: ${themeSpacing(3)};\n  margin-left: ${themeSpacing(3)};\n`;\r\nconst SelectStyle = styled.select `\n  width: 100%;\n  height: 100%;\n  padding: ${themeSpacing(2, 3)};\n  font-size: 1rem;\n  border: 1px solid ${themeColor('tint', 'level5')};\n  border-radius: 0;\n  background-color: ${themeColor('tint', 'level1')};\n  appearance: none;\n  cursor: pointer;\n\n  /* IE11 (hide native arrow button) */\n  &::-ms-expand {\n    display: none;\n  }\n\n  /* IE11 (hide native focus state) */\n  &::-ms-value {\n    color: black;\n    background: transparent;\n  }\n\n  /* Firefox (hide native focus state) */\n  &:-moz-focusring {\n    color: transparent;\n    text-shadow: 0 0 0 ${themeColor('tint', 'level7')};\n  }\n\n  &:hover {\n    ${({ disabled, error }) => !disabled &&\r\n    !error &&\r\n    css `\n        border: 1px solid ${themeColor('tint', 'level7')};\n      `}\n  }\n\n  &:disabled {\n    pointer-events: none;\n    opacity: 0.5;\n    border: 1px solid ${themeColor('tint', 'level4')};\n  }\n\n  ${({ error }) => error &&\r\n    css `\n      border: 1px solid ${themeColor('error', 'main')};\n    `}\n`;\r\nexport default SelectStyle;\r\n//# sourceMappingURL=SelectStyle.js.map","var __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\r\nimport { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState, } from 'react';\r\nimport FormLabelStyle from '../FormLabelStyle';\r\nimport SelectStyle, { AbsoluteContentWrapper, SelectedValue, SelectIcon, SelectWrapper, } from './SelectStyle';\r\n/**\r\n * Gets a list of the selected `<option>` elements which are present inside of a `<select>`.\r\n *\r\n * @param select The `<select>` element of which to get the selected options.\r\n */\r\nfunction getSelectedOptions(select) {\r\n    if (select.selectedOptions) {\r\n        return Array.from(select.selectedOptions);\r\n    }\r\n    // The 'edOptions' property is not supported (IE11)\r\n    return Array.from(select.querySelectorAll(':checked'));\r\n}\r\nconst Select = forwardRef((_a, externalRef) => {\r\n    var { id, value, label, srOnly: srOnlyProp, error, labelStyle, onChange, children, disabled, className } = _a, otherProps = __rest(_a, [\"id\", \"value\", \"label\", \"srOnly\", \"error\", \"labelStyle\", \"onChange\", \"children\", \"disabled\", \"className\"]);\r\n    const srOnly = srOnlyProp || false;\r\n    const [selectedValue, setSelectedValue] = useState('');\r\n    const ref = useRef(null);\r\n    const updateValue = useCallback((select) => {\r\n        const selectedOption = getSelectedOptions(select)[0];\r\n        if (selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.textContent) {\r\n            setSelectedValue(selectedOption.textContent);\r\n        }\r\n    }, []);\r\n    const handleChange = useCallback((event) => {\r\n        updateValue(event.target);\r\n        if (onChange) {\r\n            onChange(event);\r\n        }\r\n    }, [onChange, updateValue]);\r\n    useImperativeHandle(externalRef, () => ref.current);\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n            updateValue(ref.current);\r\n        }\r\n    }, [ref, updateValue, value]);\r\n    return (_jsxs(_Fragment, { children: [label && (_jsx(FormLabelStyle, Object.assign({ srOnly: srOnly, htmlFor: id, label: label, style: labelStyle }, { children: label }))), _jsxs(SelectWrapper, Object.assign({ className: className }, { children: [_jsx(SelectStyle, Object.assign({}, Object.assign(Object.assign({}, otherProps), { id,\r\n                        value,\r\n                        error }), { disabled: disabled, error: error, ref: ref, onChange: handleChange }, { children: children })), _jsxs(AbsoluteContentWrapper, { children: [_jsx(SelectedValue, Object.assign({ \"data-testid\": \"selectedValue\", disabled: disabled }, { children: selectedValue })), _jsx(SelectIcon, {})] })] }))] }));\r\n});\r\nexport default Select;\r\n//# sourceMappingURL=Select.js.map","import styled from 'styled-components';\r\nimport { inputCss } from '../Input';\r\nconst TextAreaStyle = styled.textarea `\n  ${inputCss}\n`;\r\nexport default TextAreaStyle;\r\n//# sourceMappingURL=TextAreaStyle.js.map","var __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { forwardRef } from 'react';\r\nimport TextAreaStyle from './TextAreaStyle';\r\nconst TextArea = forwardRef((_a, ref) => {\r\n    var { value, error } = _a, otherProps = __rest(_a, [\"value\", \"error\"]);\r\n    return (_jsx(TextAreaStyle, Object.assign({ ref: ref, error: error, value: value }, otherProps)));\r\n});\r\nexport default TextArea;\r\n//# sourceMappingURL=TextArea.js.map"],"names":[],"sourceRoot":""}