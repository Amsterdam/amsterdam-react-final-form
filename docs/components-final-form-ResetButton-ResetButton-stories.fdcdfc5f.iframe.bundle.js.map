{"version":3,"file":"components-final-form-ResetButton-ResetButton-stories.fdcdfc5f.iframe.bundle.js","mappings":";;;;;;;AAgBA;;AAEA;AAEA;;AAGA;;AAqMA;AA7DA;;;;;;;;;;AAUA;AACA;;;;AAKA;;AAEA;AAvJA;;AAKA;AACA;AACA;;;;AAIA;;AAGA;;AAGA;AACA;AACA;;;;AAIA;;;AAGA;;AAGA;;AAEA;AACA;;;AAIA;;AAGA;AACA;;;;AAIA;;AAGA;;AAGA;AACA;AACA;AACA;;;AAGA;;AAGA;;;;;;AAOA;;AAEA;;;AAGA;;;AAGA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAGA;AAEA;AACA;;AAEA;;AAGA;AAEA;AACA;;AAEA;AACA;;AAEA;;AAGA;AAGA;AAGA;AAEA;;;AAGA;AAEA;;;;AAIA;AAGA;AAEA;;;AAIA;AC1JA;;;;;;;;ADkLA;;;;;;AAOA;;;;;AAKA;;;;AAIA;;;;;;;AAOA;AACA;AACA;;AAEA;AAEA;AACA;;;AAGA;;;;AErNA;;;;;;;;;ACeA;;;;;;;;;;AAUA;;;AAGA;AAEA;AACA;AACA;;AAGA;;;;;;;;AAQA;AACA;;;AAIA;;AAIA;;AAEA;;;;;;AAMA;AAIA;;;;;;ACrDA;AACA;AAEA;;AAEA;AACA;AACA;;AAEA;AAEA;;;AAGA;;;AAGA;AACA;AACA;;;;AAIA;AAEA;;;AC9BA;;;;AAIA;;AAEA;AACA;;AAGA;;;;AAIA;AAEA;;AAGA;AACA;AAEA;;ACvBA;;AAEA;AACA;AACA;;AAIA;;;AAGA;;;AAIA;AAEA;AACA;;;;AAIA;;;AAKA;AAKA;;;AAKA;;AAIA;;;AAIA;ACbA;AACA;;AAqCA;;;;AC9DA;AAGA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;AAeA;;;;AAMA;;;;;;;ACzBA;;;;AAMA;;AAEA;AAGA;;;;;AAKA;AAGA;AACA;AAIA;AACA;AAEA;AC/CA;AACA;;;;ACFA;;;;;;AAMA;AACA;AAEA;;ACuDA;AACA;;;AAGA;;AAGA;AACA;;AAEA;AA5DA;AAAA;AAwBA;AAxBA;AAAA;AA+BA;AAEA;AACA;AAIA;AAEA;AACA;AA3BA;AAmDA;ACtEA;;AAEA;AAOA;ACRA;AAGA","sources":["webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-ui/es/components/Button/ButtonStyle.js","webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-ui/es/components/shared/ie-fixes.js","webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-ui/es/components/Button/Button.js","webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-ui/es/components/Checkbox/CheckboxStyle.js","webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-ui/es/components/Icon/IconStyle.js","webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-ui/es/components/Input/InputStyle.js","webpack://@amsterdam/amsterdam-react-final-form/./node_modules/@amsterdam/asc-ui/es/components/Label/LabelStyle.js","webpack://@amsterdam/amsterdam-react-final-form/./src/components/layout/responsiveProps.ts","webpack://@amsterdam/amsterdam-react-final-form/./src/utils/InfoTooltip.tsx","webpack://@amsterdam/amsterdam-react-final-form/./src/components/unbound/Label.tsx","webpack://@amsterdam/amsterdam-react-final-form/./src/components/unbound/Hint.tsx","webpack://@amsterdam/amsterdam-react-final-form/./src/components/unbound/FieldError.tsx","webpack://@amsterdam/amsterdam-react-final-form/./src/components/layout/FormGridCell.tsx","webpack://@amsterdam/amsterdam-react-final-form/./src/components/unbound/UnboundButton.tsx","webpack://@amsterdam/amsterdam-react-final-form/./src/components/unbound/UnboundTextField.tsx"],"sourcesContent":["import { darken, readableColor, size, transitions } from 'polished';\r\nimport styled, { css } from 'styled-components';\r\nimport { svgFill, themeColor, themeSpacing } from '../../utils';\r\nimport Icon from '../Icon';\r\nimport { flexboxMinHeightFix } from '../shared/ie-fixes';\r\nconst defaultProps = {\r\n    size: 30,\r\n};\r\nexport const getButtonHeight = (theme) => themeSpacing(11)({ theme });\r\nexport const ArrowRight = styled.div `\n  position: relative;\n  top: 0;\n  right: -15px;\n  width: 0;\n  height: 0;\n  border: 22px solid rgba(255, 255, 255, 0);\n  border-left: 15px solid ${themeColor('secondary')};\n  border-right: 0;\n  ${transitions('border-color', '0.1s ease-in-out')}\n`;\r\nexport const IconLeft = styled(Icon) `\n  margin-right: 10px;\n`;\r\nexport const IconRight = styled(Icon) `\n  margin-left: 10px;\n`;\r\nconst getVariant = () => ({ theme, variant, color, }) => {\r\n    switch (variant) {\r\n        case 'primary':\r\n            return css `\n          min-width: 90px;\n          background-color: ${themeColor('primary')};\n          color: ${readableColor(themeColor('primary')({ theme }))};\n          ${svgFill(themeColor('tint', 'level1'))};\n\n          &:focus,\n          &:hover {\n            background-color: ${darken(0.1, themeColor('primary')({ theme }))};\n          }\n        `;\r\n        case 'secondary':\r\n            return css `\n          min-width: 90px;\n          background-color: ${themeColor('secondary')};\n          color: ${themeColor('tint', 'level1')};\n          ${svgFill(themeColor('tint', 'level1'))};\n\n          &:focus,\n          &:hover {\n            background-color: ${darken(0.1, themeColor('secondary')({ theme }))};\n          }\n\n          ${(taskflow) => taskflow &&\r\n                css `\n              &:not(:disabled)&:focus\n                ${ArrowRight},\n                &:not(:disabled)&:hover\n                ${ArrowRight} {\n                border-left-color: ${darken(0.1, themeColor('secondary')({ theme }))};\n              }\n            `}\n        `;\r\n        case 'tertiary':\r\n            return css `\n          min-width: 90px;\n          background-color: ${themeColor('tint', 'level4')};\n          ${svgFill(themeColor('tint', 'level7'))};\n\n          &:focus,\n          &:hover {\n            background-color: ${darken(0.1, themeColor('tint', 'level4')({ theme }))};\n          }\n        `;\r\n        case 'primaryInverted':\r\n            return css `\n          min-width: 90px;\n          color: ${themeColor('primary')};\n          border: 1px solid ${themeColor('primary')};\n          background-color: ${themeColor('tint', 'level1')};\n          ${svgFill(themeColor('primary', 'main'))};\n\n          &:hover {\n            outline: 1px solid ${themeColor('primary')};\n          }\n        `;\r\n        case 'textButton':\r\n            return css `\n          height: auto;\n          padding: 0;\n          align-self: baseline;\n          white-space: normal;\n          text-align: left;\n          color: ${themeColor('primary')};\n          background-color: rgba(0, 0, 0, 0);\n          ${svgFill(themeColor('primary', 'main'))};\n\n          /* remove transition because it's async with Icon */\n          ${transitions('color', '0s')}\n\n          &:hover {\n            color: ${themeColor('secondary')};\n            ${svgFill(themeColor('secondary', 'main'))};\n          }\n\n          ${IconLeft} {\n            margin-right: ${themeSpacing(1)};\n          }\n          ${IconRight} {\n            margin-left: ${themeSpacing(1)};\n          }\n        `;\r\n        case 'blank':\r\n            return css `\n          background-color: ${themeColor('tint', 'level1')};\n          ${svgFill(themeColor('tint', 'level7'))};\n          &:hover {\n            background-color: ${themeColor('tint', 'level3')};\n          }\n        `;\r\n        case 'application':\r\n            return css `\n          border: 1px solid ${themeColor('tint', 'level7')};\n          background-color: ${themeColor('tint', 'level1')};\n          height: 32px;\n          padding: ${themeSpacing(1, 2)};\n          ${svgFill(themeColor('tint', 'level7'))};\n          &:hover {\n            background-color: ${themeColor('tint', 'level4')};\n          }\n        `;\r\n        default:\r\n            // About-to-be-deprecated codeblock to support the 'color' prop\r\n            return css `\n          color: ${color\r\n                ? readableColor(themeColor(color)({ theme }))\r\n                : themeColor('primary')({ theme })};\n          ${color &&\r\n                css `\n            background: ${themeColor(color)};\n          `}\n\n          ${!color &&\r\n                css `\n            border: 1px solid ${themeColor('primary')};\n          `}\n\n        &:hover {\n            background: ${color\r\n                ? themeColor(color, 'dark')({ theme })\r\n                : themeColor('tint', 'level3')({ theme })};\n            ${!color &&\r\n                css `\n              outline: 1px solid ${themeColor('primary')};\n            `}\n          }\n        `;\r\n    }\r\n};\r\nconst ButtonStyle = styled.button `\n  height: ${({ theme }) => getButtonHeight(theme)};\n  white-space: nowrap;\n  display: inline-flex;\n  align-items: center;\n  text-decoration: none;\n  border: none;\n  cursor: pointer;\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 20px;\n  padding: ${({ size: sizeProp, theme }) => sizeProp ? '0' : themeSpacing(3, 4)({ theme })};\n  ${({ size: sizeProp, square }) => (sizeProp || square) && // make the button square\r\n    css `\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      ${size(sizeProp || defaultProps.size)}// width and height\n    `}\n  ${transitions(['color', 'background-color'], '0.1s ease-in-out')}\n  ${getVariant()}\n  ${flexboxMinHeightFix()} // ie fix\n  ${({ taskflow }) => taskflow &&\r\n    css `\n      position: relative;\n      min-width: initial;\n      padding-right: 0;\n      padding-top: 0; // safari fix\n      padding-bottom: 0; // safari fix\n      line-height: ${({ theme }) => getButtonHeight(theme)}; // safari 10.1 fix\n      z-index: 0;\n      && {\n        margin-right: 25px;\n      }\n      &:focus ${ArrowRight}:after {\n        opacity: 1;\n      }\n    `}\n  ${Icon} {\n    flex-shrink: 0;\n  }\n  &:disabled {\n    cursor: default;\n    outline: none;\n    border: none;\n    color: ${themeColor('tint', 'level4')};\n    background-color: ${themeColor('tint', 'level3')};\n    ${svgFill(themeColor('tint', 'level4'))};\n    text-decoration: none;\n    ${({ taskflow }) => taskflow &&\r\n    css `\n        ${ArrowRight} {\n          border-left-color: ${themeColor('tint', 'level3')};\n        }\n      `}\n    ${({ variant }) => variant &&\r\n    variant === 'textButton' &&\r\n    css `\n        background-color: rgba(0, 0, 0, 0);\n      `}\n  }\n`;\r\nexport default ButtonStyle;\r\n//# sourceMappingURL=ButtonStyle.js.map","/* eslint-disable import/prefer-default-export */\r\nimport { css } from 'styled-components';\r\nexport const flexboxMinHeightFix = () => css `\n  &::after {\n    content: '';\n    display: block;\n    min-height: inherit;\n    font-size: 0;\n  }\n`;\r\n//# sourceMappingURL=ie-fixes.js.map","var __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { forwardRef } from 'react';\r\nimport Icon, { defaultProps as iconDefaultProps } from '../Icon/Icon';\r\nimport ButtonStyle, { ArrowRight, IconLeft, IconRight, } from './ButtonStyle';\r\nconst Button = forwardRef((_a, ref) => {\r\n    var { children, iconLeft, iconRight, icon, iconSize, taskflow } = _a, otherProps = __rest(_a, [\"children\", \"iconLeft\", \"iconRight\", \"icon\", \"iconSize\", \"taskflow\"]);\r\n    const iconProps = {\r\n        size: iconSize || iconDefaultProps.size,\r\n    };\r\n    return (_jsxs(ButtonStyle, Object.assign({ ref: ref }, otherProps, { taskflow: taskflow }, { children: [iconLeft && _jsx(IconLeft, Object.assign({}, iconProps, { children: iconLeft })), icon ? _jsx(Icon, Object.assign({}, iconProps, { children: icon })) : children, iconRight && _jsx(IconRight, Object.assign({}, iconProps, { children: iconRight })), taskflow && _jsx(ArrowRight, {})] })));\r\n});\r\nexport default Button;\r\n//# sourceMappingURL=Button.js.map","import styled, { css } from 'styled-components';\r\nimport { svgFill, themeColor } from '../../utils';\r\nimport { IconStyle } from '../Icon';\r\nexport default styled.input.attrs({\r\n    type: 'checkbox',\r\n}) `\n  cursor: inherit;\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  width: 24px;\n  height: 24px;\n  left: 6px;\n  top: 6px;\n`;\r\nconst CheckboxIconStyle = styled(IconStyle) `\n  display: flex;\n  border-width: 1px;\n  border-style: solid;\n  width: 22px;\n  height: 22px;\n  position: relative;\n  justify-content: center;\n  align-items: center;\n  z-index: 1;\n  background-color: ${themeColor('tint', 'level1')};\n  transition: background-color 0.2s ease-in-out;\n  pointer-events: none;\n  ${({ checked, indeterminate }) => (checked || indeterminate) &&\r\n    css `\n      color: ${themeColor('tint', 'level7')};\n      background-color: ${themeColor('tint', 'level7')};\n      ${svgFill(themeColor('tint', 'level1'))};\n    `};\n`;\r\nconst CheckboxWrapperStyle = styled.span `\n  position: relative;\n  display: inline-flex;\n  user-select: none;\n  vertical-align: middle;\n  margin-bottom: 1px;\n  padding: 6px;\n  flex-shrink: 0; /* IE11 fix */\n  color: ${themeColor('tint', 'level5')};\n  ${({ disabled }) => disabled &&\r\n    css `\n      pointer-events: none;\n    `}\n  ${({ checked, disabled }) => !checked &&\r\n    !disabled && // IE11 fix. If an element is disabled, you can still hover on it on IE11.\r\n    css `\n      &:hover {\n        color: ${themeColor('tint', 'level7')};\n\n        ${CheckboxIconStyle} {\n          outline-style: solid;\n          outline-width: 1px;\n        }\n      }\n    `}\n    ${({ error, checked, disabled }) => error &&\r\n    !checked &&\r\n    !disabled &&\r\n    css `\n      ${CheckboxIconStyle} {\n        border-color: red;\n        outline: 1px solid red;\n      }\n    `}\n`;\r\nexport { CheckboxWrapperStyle, CheckboxIconStyle };\r\n//# sourceMappingURL=CheckboxStyle.js.map","import styled, { css } from 'styled-components';\r\nimport { svgFill } from '../../utils';\r\nexport const defaultProps = {\r\n    size: 20,\r\n    padding: 0,\r\n    rotate: 0,\r\n};\r\nconst IconStyle = styled.span.withConfig({\r\n    shouldForwardProp: (prop, defaultValidatorFn) => !['size', 'rotate', 'padding', 'inline', 'color'].includes(prop) &&\r\n        defaultValidatorFn(prop),\r\n}) `\n  display: ${({ inline }) => (inline ? 'inline-flex' : 'flex')};\n  ${({ iconUrl }) => iconUrl &&\r\n    css `\n      background-image: url(${iconUrl});\n    `}\n  ${({ size = defaultProps.size, padding = defaultProps.padding }) => css `\n    width: ${size - padding * 2}px;\n    height: ${size - padding * 2}px;\n  `}\n  ${({ padding }) => padding &&\r\n    css `\n      padding: ${padding}px;\n    `};\n  box-sizing: content-box;\n  ${({ rotate = defaultProps.rotate }) => `transform: rotate(${rotate}deg)`};\n\n  & > svg {\n    ${({ size = defaultProps.size, padding = defaultProps.padding }) => css `\n      width: ${size - padding * 2}px;\n      height: ${size - padding * 2}px;\n    `}\n  }\n\n  ${({ color }) => color && svgFill(color)};\n`;\r\nexport default IconStyle;\r\n//# sourceMappingURL=IconStyle.js.map","import styled, { css } from 'styled-components';\r\nimport { themeColor, themeSpacing } from '../../utils';\r\nimport { INPUT_SIZE } from '../shared/constants';\r\nexport const inputCss = css `\n  appearance: none;\n  font-size: 16px;\n  border: solid 1px ${themeColor('tint', 'level5')};\n  border-radius: 0;\n  box-sizing: border-box;\n  line-height: 18px;\n  padding: ${themeSpacing(2)};\n  width: 100%;\n  height: ${INPUT_SIZE}px;\n  ${({ error }) => !error &&\r\n    css `\n      &:hover {\n        border-color: ${themeColor('tint', 'level6')};\n      }\n    `}\n\n  ${({ error }) => error &&\r\n    css `\n      border-color: ${themeColor('secondary', 'main')};\n    `}\n`;\r\nconst InputStyle = styled.input `\n  ${inputCss}\n`;\r\nexport default InputStyle;\r\n//# sourceMappingURL=InputStyle.js.map","import styled, { css } from 'styled-components';\r\nimport { srOnlyStyle, themeColor } from '../../utils';\r\nimport { CheckboxWrapperStyle } from '../Checkbox';\r\nconst LabelStyle = styled.label `\n  display: inline-flex;\n  align-items: ${({ align }) => align};\n  vertical-align: middle;\n  color: ${themeColor('tint', 'level7')};\n  ${({ srOnly }) => srOnly && srOnlyStyle}\n  ${({ disabled }) => disabled\r\n    ? css `\n          opacity: 0.3;\n        `\r\n    : css `\n          cursor: pointer;\n        `}\n  ${({ position }) => (position === 'top' || position === 'bottom') &&\r\n    css `\n      flex-direction: column;\n    `}\n  ${({ position }) => position &&\r\n    css `\n      & ${CheckboxWrapperStyle} {\n        padding-${position}: 12px;\n      }\n    `}\n  \n  ${({ active }) => active &&\r\n    css `\n      font-weight: 700;\n    `}\n`;\r\nLabelStyle.defaultProps = {\r\n    position: 'right',\r\n    align: 'center',\r\n};\r\nexport const LabelTextStyle = styled.span `\n  ${({ position }) => position !== 'top' &&\r\n    position !== 'bottom' &&\r\n    css `\n      margin: 9.2px 0; /* To align the label to a checkbox / radiobutton when having a long text. line-height is 1.15 / 18.4px (from normalize css). Margin top & bottom = lineheight / 2 */\n    `}\n  ${({ position }) => position === 'top' || position === 'left'\r\n    ? css `\n          order: 0;\n        `\r\n    : css `\n          order: 1;\n        `}\n`;\r\nexport default LabelStyle;\r\n//# sourceMappingURL=LabelStyle.js.map","import { breakpoint } from \"@amsterdam/asc-ui\"\nimport { css } from \"styled-components\"\n\nexport type BreakPoint =\n  | \"mobileS\"\n  | \"mobileM\"\n  | \"mobileL\"\n  | \"tabletS\"\n  | \"tabletM\"\n  | \"laptop\"\n  | \"laptopM\"\n  | \"laptopL\"\n  | \"desktop\"\n  | \"desktopL\"\n\nexport type OnlyResponsive<T> = { [key in BreakPoint]?: T }\nexport type Responsive<T> = T | OnlyResponsive<T>\n\ntype UnitFunction = (unit: any) => any\n\nconst breakPoints: BreakPoint[] = [\n  \"mobileS\",\n  \"mobileM\",\n  \"mobileL\",\n  \"tabletS\",\n  \"tabletM\",\n  \"laptop\",\n  \"laptopM\",\n  \"laptopL\",\n  \"desktop\",\n  \"desktopL\"\n]\n\n/**\n * Wraps given cssRules in the corresponding media-query:\n */\nexport const mq = (bk: BreakPoint, cssRules: any) => css`\n  @media screen and ${ breakpoint(\"min-width\", bk) } {\n    ${ cssRules }\n  }\n`\n\nconst isResponsiveObject = (obj:any): obj is Responsive<any> => {\n  if (typeof obj !== \"object\") {\n    return false\n  }\n\n  const keys = Object.keys(obj)\n  for(const breakPoint of breakPoints) {\n    if (keys.includes(breakPoint)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Wraps 'responsive-props' in media-queries if necessary.\n */\nexport const responsiveProps = <T extends Record<string, any>>(props: T, map: { [key in keyof T]: UnitFunction }) => {\n  const nonResponsiveRules = Object\n    .entries<UnitFunction>(map)\n    .filter(([key]) => !isResponsiveObject(props[key]))\n    .map(([key, fun]) => fun(props[key]))\n\n  const mediaQueries = breakPoints\n    .map(bp => {\n      // See if we can make css-rules for this breakpoint:\n      const responsiveCssRules = Object\n        .entries<UnitFunction>(map)\n        .filter(([key]) => props?.[key]?.[bp] !== undefined)\n        .map(([key, fun]) => fun(props[key][bp]))\n\n      return (responsiveCssRules.length > 0)\n        ? mq(bp, responsiveCssRules) // Wrap css-rules in a mediaQuery\n        : undefined // Undefined -> filter out later\n    })\n    .filter(_ => _ !== undefined)\n\n  return [\n    mediaQueries, ...nonResponsiveRules\n  ]\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport { Icon, themeSpacing } from \"@amsterdam/asc-ui\"\nimport { Info } from \"@amsterdam/asc-assets\"\n\ntype Props = {\n  text: string\n}\n\nconst Wrap = styled.div`\n  position: relative;\n  display: inline-block;\n  cursor: help;\n  margin-left: ${ themeSpacing(2) } !important;\n`\n\nconst StyledTooltipText = styled.span`\n  visibility: hidden;\n  opacity: 0;\n  position: absolute;\n  z-index: 100;\n  white-space: normal;\n  width: 250px;\n  background-color: rgba(0, 0, 0, 0.85);\n  color: #fff;\n  text-align: center;\n  font-size: 14px;\n  border-radius: 6px;\n  padding: ${ themeSpacing(2) };\n  bottom: 100%;\n  left: 50%;\n  margin-left: -125px !important;\n  transition: opacity 0.3s;\n  &::after {\n    content: \"\";\n    position: absolute;\n    top: 100%;\n    left: 50%;\n    margin-left: -5px;\n    border-width: 5px;\n    border-style: solid;\n    border-color: black transparent transparent transparent;\n  }\n  ${ Wrap }:hover & {\n    visibility: visible;\n    opacity: 1;\n  }\n`\n\nconst InfoTooltip: React.FC<Props> = ({ text }) => (\n  <Wrap>\n    <Icon size={18}>\n      <Info />\n    </Icon>\n    <StyledTooltipText>{text}</StyledTooltipText>\n  </Wrap>\n)\n\nexport default InfoTooltip\n","import React from \"react\"\nimport { Label as AscLabel, themeSpacing } from \"@amsterdam/asc-ui\"\nimport styled, { css } from \"styled-components\"\nimport InfoTooltip from \"../../utils/InfoTooltip\"\n\ntype Props = {\n  label?: string\n  extraLabel?: string | JSX.Element\n  extraLabelAlign?: \"left\" | \"right\"\n  htmlFor?: string\n  tooltip?: string\n}\n\ntype WrapProps = {\n  extraLabelAlign: string\n}\n\nconst style = css`\n  line-height: 18px;\n  font-size: 18px;\n  font-weight: 600;\n  width: 100%;\n\n  span {\n    margin: ${ themeSpacing(1) } 0;\n    align-items: center;\n    display: flex;\n  }\n`\n\nconst FlexWrap = styled.div<WrapProps>`\n  display: flex;\n  justify-content: ${ ( { extraLabelAlign }) => extraLabelAlign === \"right\" ? \"space-between\" : \"flex-start\" }\n`\n\nconst Left = styled.div`\n  flex-grow: 0;\n  flex-shrink: 0;\n  white-space: nowrap;\n  align-self: center;\n  margin-right: ${ themeSpacing(2) };\n`\n\nconst Right = styled.div`\n  margin: ${ themeSpacing(1) } 0;\n`\n\n\nconst StyledLabel = styled(AscLabel)`\n  ${ style }\n`\nStyledLabel.displayName = \"StyledLabel\"\n\nexport const Label:React.FC<Props> = ({ label, extraLabel, extraLabelAlign = \"left\", htmlFor, children, tooltip  }) => {\n  if (label !== undefined) {\n    return (\n      extraLabel\n        ? (\n          <FlexWrap extraLabelAlign={ extraLabelAlign }>\n            <Left>\n              <StyledLabel\n                label={\n                  <>\n                    {label}\n                    {tooltip && <InfoTooltip text={tooltip} />}\n                  </>\n                }\n                htmlFor={htmlFor}\n                position='top'\n                align='flex-start'\n              >\n                { children }\n              </StyledLabel>\n            </Left>\n            { extraLabelAlign === \"right\" ? (\n              <Right>\n                { extraLabel }\n              </Right>\n            ) : (\n              <Left>\n                { extraLabel }\n              </Left>\n            )}\n          </FlexWrap>\n        )\n        : (\n        <StyledLabel\n          label={\n            <>\n              {label}\n              {tooltip && <InfoTooltip text={tooltip} />}\n            </>\n          }\n          htmlFor={htmlFor}\n          position='top'\n          align='flex-start'\n        >\n          { children }\n        </StyledLabel>\n      )\n    )\n  }\n  return <>{ children }</>\n}","import styled from \"styled-components\"\nimport { themeColor, themeSpacing } from \"@amsterdam/asc-ui\"\n\nexport const Hint = styled.p`\n  color: ${ themeColor(\"tint\", \"level4\") };\n  font-size: ${ themeSpacing(4) };\n  margin: 0;  \n  line-height: 22px;\n  font-weight: normal;\n`\n","import styled from \"styled-components\"\nimport { themeColor, themeSpacing } from \"@amsterdam/asc-ui\"\n\nexport const FieldError = styled.div`\n  line-height: 25px;\n  font-size: 18px;\n  font-weight: 600;\n  width: 100%;\n  \n  margin-top: ${ themeSpacing(2) };\n  color: ${ themeColor(\"support\", \"invalid\") }\n`\nFieldError.displayName = \"FieldError\"\n","import styled, { css, SimpleInterpolation } from \"styled-components\"\nimport { Responsive, responsiveProps }  from \"./responsiveProps\"\nimport { themeSpacing } from \"@amsterdam/asc-ui\"\n\nexport type Dimensions = {\n  row?: number,\n  rowSpan?: number\n  column?: number\n  columnSpan?: number\n}\n\nexport type FormGridCellProps = {\n  position?: Responsive<Dimensions>\n  align?: Responsive<\"left\" | \"right\" | \"center\">\n  rowOffset?: number\n}\n\nconst NUM_ROWS_PER_FIELD = 2\n\n// NOTE:\n//\n// We have to implement our own version of -ms-grid.\n// Styled-components does not automatically prefix it, as the specs do not completely overlap.\n// https://github.com/thysultan/stylis.js/issues/51\n//\n// We can achieve our goals using both specs though.\n\nconst generateDimensionsCss = (position:Dimensions, rowOffset:number) => {\n  const parts:SimpleInterpolation[] = []\n\n  if (position === undefined) {\n    return parts\n  }\n\n  if (position.row !== undefined) {\n    parts.push(css`\n      grid-row-start: ${ (position.row * NUM_ROWS_PER_FIELD) + 1 + rowOffset };\n      -ms-grid-row: ${ (position.row * NUM_ROWS_PER_FIELD) + 1 + rowOffset };\n    `)\n  }\n\n  if (position.rowSpan && rowOffset) {\n    parts.push(css`\n      grid-row-end: span ${ (position.rowSpan * NUM_ROWS_PER_FIELD) - 1 };\n      -ms-grid-row-span: ${ (position.rowSpan * NUM_ROWS_PER_FIELD) - 1 };\n    `)\n  }\n\n  if (position.column !== undefined)  {\n    parts.push(css`\n      grid-column-start: ${ position.column + 1 };\n      -ms-grid-column: ${ position.column + 1 };\n    `)\n  }\n\n  if (position.columnSpan !== undefined) {\n    parts.push(css`\n      grid-column-end: span ${ position.columnSpan };\n      -ms-grid-column-span: ${ position.columnSpan };\n    `)\n  }\n\n  return parts\n}\n\nconst FormGridCell = styled.div<FormGridCellProps>`\n\n  margin: ${ themeSpacing(1) } ${ themeSpacing(2) };\n  ${ ({ rowOffset }) => rowOffset !== undefined && css`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: ${ themeSpacing(5) };`\n  }\n\n  align-self: ${ ({ rowOffset }) => rowOffset === undefined ? \"end\" : \"initial\" };\n  -ms-grid-row-align: ${ ({ rowOffset }) => rowOffset === undefined ? \"end\" : \"initial\" };\n\n  ${ (props: FormGridCellProps) => responsiveProps(props, {\n    \"align\": unit => css`text-align: ${ unit };`,\n    \"position\": unit => generateDimensionsCss(unit, props.rowOffset ?? 0)\n  } ) }\n`\nFormGridCell.displayName = \"FormGridCell\"\n\nexport default FormGridCell\n","import React from \"react\"\nimport { Button, themeSpacing } from \"@amsterdam/asc-ui\"\nimport styled, { css } from \"styled-components\"\nimport ComposedField, { ComposedFieldProps } from \"./ComposedField\"\nimport { Responsive, responsiveProps } from \"../layout/responsiveProps\"\n\nexport type Props = React.ComponentProps<typeof Button> & ComposedFieldProps & {\n  alignedHorizontally?: Responsive<boolean>\n}\n\ntype StyledButtonProps = Pick<Props, \"alignedHorizontally\">\nconst StyledButton = styled(Button)<StyledButtonProps>`\n  margin-top: ${ themeSpacing(1) };\n  \n  ${ ((props:StyledButtonProps) => responsiveProps(props, {\n    // Its aesthetically more pleasing if horizontally aligned buttons have a negative top-margin.\n    // You have to set the property yourself though\n    alignedHorizontally: unit => css`margin-top: ${ themeSpacing( unit ? -1 : 1) };`\n  })) }\n`\n\nconst UnboundButton:React.FC<Props> = ({ position, align, ...restProps }) => (<ComposedField position={position} align={align}>\n  <div><StyledButton {...restProps} /></div>\n</ComposedField>)\n\nexport default UnboundButton\n","import React from \"react\"\nimport { Input } from \"@amsterdam/asc-ui\"\nimport styled from \"styled-components\"\n\nimport ComposedField, { ComposedFieldProps } from \"./ComposedField\"\n\nexport type Props = ComposedFieldProps & React.InputHTMLAttributes<HTMLInputElement>\n\n/**\n * Renders a INPUT field that is not bound to final-form.\n */\n\nconst StyledInput = styled(Input)`\n  min-height: ${ props => props.type === \"time\" ? \"40px\" : \"auto\" };\n`\n\nconst UnboundTextField:React.FC<Props> = ({\n  label, extraLabel, extraLabelAlign, hint, error, position, align, tooltip, ...otherProps\n}) =>\n  <ComposedField\n    id={otherProps.id ?? otherProps.name}\n    label={label}\n    extraLabel={extraLabel}\n    extraLabelAlign={extraLabelAlign}\n    hint={hint}\n    error={error}\n    position={position}\n    align={align}\n    tooltip={tooltip}\n  >\n    <StyledInput\n      error={!!error}\n      id={otherProps.id ?? otherProps.name}\n      data-testid={otherProps.id ?? otherProps.name}\n      {...otherProps}\n    />\n  </ComposedField>\n\nexport default UnboundTextField\n"],"names":[],"sourceRoot":""}